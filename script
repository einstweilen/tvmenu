#!/usr/local/bin/python3

# TV Menü 1.0
# https://github.com/einstweilen/tvmenu

import sys
import os
import requests
import json
import unicodedata

os.chdir(os.path.dirname(os.path.abspath(__file__)))
if not os.path.exists('data'):
    os.makedirs('data')

channels_file = 'data/channels.json'
channels_backup_file = 'data/channels_backup.json'
channels_fixer = 'data/channels_fix.json' # korrigierte und zusätzliche Channels
channel_url = "https://raw.githubusercontent.com/mediathekview/zapp/main/app/src/main/res/raw/channels.json"
# Liste aus der ZAPP App von Christine Coenen https://github.com/mediathekview/zapp/

streamplayer = "open -a QuickTime\ Player.app -u"

gruppen_min = 2 # min. Anzahl der Sender in einer Sendergruppe für ein Submenü

def close_qtplayer(): # eventuell bereits laufende QT Videos beenden
    cmd = """osascript -e '
    tell application "QuickTime Player" to close every window
    '
    """
    os.system(cmd)
    return


def get_channels():
    if not os.path.isfile(channels_file):
        try:
            r = requests.get(channel_url)
            r.raise_for_status()
            ch_raw = r.text
            with open(channels_file, "w") as f:
                f.write(unicodedata.normalize('NFD', ch_raw))
        except:
            # langsam ohne shutil weil nur im Notfall 7 KB kopiert werden
            open(channels_file, 'wb').write(open(channels_backup_file, 'rb').read())
    with open(channels_file, 'r') as file:
        channels = json.load(file)


    if not os.path.isfile(channels_fixer):
        with open(channels_fixer, "w") as f:
            f.write("[]")
    with open(channels_fixer, 'r') as file:
        channels += json.load(file)
    return channels


def menu_ausgabe():
    # anzeigbare Sender ermitteln
    sender_menu = [] # Sender die im Menü angezigt werden
    sender_gruppen = [] # Lokalesender NDR Nds, NDR HH, NDR SH usw.
    for i in get_channels():
        if '@' not in i['stream_url']: # Stream URLs mit @ kann QT Player nicht öffnen
            sendername = i['name']
            sender_menu.append(sendername)
            sender_gruppen.append(sendername.split()[0])
    sender_menu = sorted(sender_menu, key=str.casefold)
    sender_gruppen = sorted(sender_gruppen, key=str.casefold)

    # Sendergruppen anhand Mehrfachnennungen ermitteln
    gruppen_submenu = [] # Sendergruppen mit eigenem Submenü
    for gruppe in sender_gruppen:
        count = sender_gruppen.count(gruppe)
        if count >= gruppen_min and gruppe not in gruppen_submenu:
            gruppen_submenu.append(gruppe)

    # Senderlistenmenu ausgeben
    submenu_aktiv = False
    sender_menu.append("----")
    gruppe_aktuell = ""
    for sendername in sender_menu:
        gruppe = sendername.split()[0]
        if gruppe in gruppen_submenu:
            if gruppe != gruppe_aktuell:
                if submenu_aktiv:
                    print(sender_submenu)
                    submenu_aktiv = False
                sender_submenu = f"SUBMENU|{gruppe}"
                gruppe_aktuell = gruppe
                submenu_aktiv = True
            sender_submenu = f"{sender_submenu}|{sendername}"
        else:
            if submenu_aktiv:
                print(sender_submenu)
                submenu_aktiv = False
                print(sendername)
            else:
                print(sendername)
    print ('Senderliste aktualisieren')
    return


def channels_update():
    if not os.path.isfile(channels_file):
        get_channels()
    else:
        os.remove(channels_file)
    menu_ausgabe()


if len(sys.argv) < 2:
    menu_ausgabe()
else:
    # Übergebene Parameter auswerten 
    parameter = sys.argv[1]
    if parameter == "Senderliste aktualisieren":
        channels_update()
    else:
        der_sender=unicodedata.normalize('NFD', parameter)
        for sender in get_channels():
            if sender["name"] == der_sender and '@' not in sender['stream_url']:
                close_qtplayer()
                open_stream = f"{streamplayer} {sender['stream_url']}"
                os.system(open_stream)
                break